* meeting notes May 16, 2021
** subjects discussed 
*** richard hainsworth reports in on the documentation system work
**** current issue: static html vs dynamic database-backed system
**** a raku documentation mailing list, created by lizmat
***** documentation@raku.org
***** (don't know how to subscribe, or if it's archived somewhere)

*** raku features for writing find/grep variants (joe brenner)
**** my first attempt in perl5 bogged down, /home/doom/End/Cave/DoomfileTools/bin/df_grep.raku
***** impedance mismatch between oop and File::Find's wanted
****** how to pass args to wanted?
****** bruce gray suggests an anonymous sub with a closure
**** discussed an odd go round with
***** synopsis from an out-of-date version of File::Find


*** bruce gray discussed a rosettacode entry
**** http://rosettacode.org/wiki/Barnsley_fern#Raku 
***** william michels 
****** https://en.wikipedia.org/wiki/Affine_transformation
****** https://mathworld.wolfram.com/AffineTransformation.html

*** testing for all elements undefined
https://stackoverflow.com/questions/67373726/why-are-empty-raku-shaped-arrays-truthy
"As a follow up, I wonder if a good way to test 'all elements are undefined' is @shaped-array.any.so ???"
**** I thought: "a job for flat?"
**** bruce gray suggests just using none:
#+BEGIN_SRC perl6
    my @a =   Any xx 3;
    my @b = |(Any xx 2), 0;
    say .raku for :@a, :@b;  
     ## :a([Any, Any, Any])
     ## :b([Any, Any, 0])
    say @a.none.defined.so;  # True
    say @b.none.defined.so;  # False
#+END_SRC

*** david christensen talked about a few debian sysadmin issues
**** summary: debian 10.9 is mature enough to deal with all display hardware, 
including nvidia optimus
***** bruce gray recommends "bumblebee" to deal with nvidia optimus
https://wiki.debian.org/Bumblebee 
**** rough notes from david's piece:
dell two slots 4gb, certain dells have quiet motherboard
upgrades, two 8gb, 16gb, dual channel memory.  good for
virtualization.  SSD sata drive bay (sata two or three?)
nvidia optimus (two graphics spliced together) 
debian version 7 wouldn't boot, video issues.  eventually fixed.
put win7 pro on it for awhile, support yanked 1.5 
new used laptop win10
debian 10 was n.g. same video problem
debian 9 needed some point revisions to get there 
interested in debian 10, may have it fixed
(Note: I've got debian 10.9 slated to install).
intel model 520 ssds  enterprise desktop drive, sata 3,
self-encrypting (?), on linux uses dm-crypt for swap, nbr
partitioning, not gpt.  1gig unencrypted boot partition.
overprovisioning, a couple of different devices-- image on usb
flash drive.

samsung gb ssd performed better than usb drives, dram cache
burn up a sata slot.

*** higher-order programming as a substitute for macros (perl5)  (david christensen)
As a demo of functional programming, david christensen showed us
his code for generating type validation predicate functions
("is_string", etc). 

**** other approaches
***** bruce gray suggests Params::Util
***** https://metacpan.org/pod/Params::Util
***** there are a number of cpan modules to do parameter validation, e.g 
****** https://metacpan.org/pod/Type::Tiny#Predicate-methods
****** https://metacpan.org/pod/Params::ValidationCompiler
***** a package I wrote that does something similar
****** https://metacpan.org/pod/Scalar::Classify
******* comparing david's code to mine:
******** david's is certainly tighter, and is very consistent
******** mine does fewer sub calls-- probably performs better
******** mine returns an expanded set of string codes like the built-in "ref"
********* need to do string comparisons later might seem inelegant
***** bruce gray:
#+BEGIN_SRC sh
perl -wE 'my $v = 5.10.2; say map { sprintf "%02x" } unpack "C*", $v; say map { sprintf "%02x", $_ } unpack "C*", $v;'
#+END_SRC

*** william michels asks about one-liners to strip "soft hypens"
**** none of us had ever *seen* a soft hyphen before:
## 00AD;SOFT HYPHEN;Cf;0;BN;;;;;N;;;;;
**** what they do makes some sense: 
they mark a point in a word where it's okay to hyphenate, but
when there's no need to hyphenate, they become invisible
zero-width markers
*** bill found them in this page, notably written by hyphenation nerds:
https://practicaltypography.com/hyphenation.html
**** example
Hy­phen­ation is the au­to­mated process of break­ing words be­tween lines to cre­ate more con­sis­tency across a text block.
*** William Michels : Q. Should Raku create pre-defined (so-called) "Grey-space" character classes?
*** bruce gray supplies some requested one-liners:
**** raku -e 'say .trans("\c[SOFT HYPHEN]" => "") for lines()'
**** raku -e 'say .trans("\c[SOFT HYPHEN]" => "").chars for lines();'
*** he also makes the point you can do a chained operation to strip whitespace as well
**** raku -e 'say .trans("\c[SOFT HYPHEN]" => "").trans("\s" => "").chars for lines();' 
*** raku also lets you define custom character classes extending pre-defined ones
#+BEGIN_SRC perl6
# strip soft hyphens (U+00AD) as well as whitespace (\s)
$text_no_gs ~~ s:g/<[\s\x[00ad]]>//;
#+END_SRC

**** other zero width chars
*****  William Michels : \c[ZERO WIDTH SPACE]
*****  From Bruce Gray : https://www.ptiglobal.com/2018/04/26/the-beauty-of-unicode-zero-width-characters/

** ongoing
*** programming in the large (david christensen)
**** larger applications
**** raku die handlers
*** raku idioms
**** https://github.com/doomvox/raku-study/blob/main/notes/idioms.org
***** https://gfldex.wordpress.com/2021/04/16/all-your-idioms-are-belong-to-us/
***** maybe: favor methods over functions?

** appendix: the usual links
*** code examples
https://github.com/doomvox/raku-study/tree/main/bin/2021may16
*** meeting notes (material from this file)
https://github.com/doomvox/raku-study/tree/main/notes/meeting_2021may16.md
*** SF Perl page, has links to mailing list
http://sf.pm.org/
*** perl6-users mailing list archive
https://www.nntp.perl.org/group/perl.perl6.users/

** bits

*** bg summarizes
fosdem codesection langs for opensource  corporate backed typescript go java
raku optimized in other ways

*** announced: going to skip next sunday, thinking about going with every-other week format
suggestion: have someone else host perl5 meetings on the
off-weeks.  david christensen is interested. 

*** perl5 cpan module  Filesys::ZFS, david christensen says "not complete"
https://github.com/Raku/Raku-Steering-Council/blob/main/announcements/20200720.md

*** steve yegge, a fascinating perl hater:
https://steve-yegge.blogspot.com/

**** Bruce Gray : "For most people the perceived usefulness of a computer language is inversely proportional to the number of theoretical axes the language intends to grind."  -- Larry Wall

*** a defense of perl/raku talk

https://www.fosdem.org/2021/schedule/event/programming_lang_for_free_software/
