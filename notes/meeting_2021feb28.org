* meeting notes Feb 28, 2021
** plan
*** plan stuff
*** ask for ideas
*** stall until end of meeting
** usual stuff
*** we use a github project for sharing demo code and so on:
**** meeting notes (this file)
***** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2021feb28.org
**** demo scripts
***** https://github.com/doomvox/raku-study/tree/main/bin/2021feb28
*** this is a free form meeting without set agenda
*** typically I share screen and start talking to keep things moving
*** if you've got anything you want to show, just say so, I'll unshare
** announcements
SV Perl talk: Ian Kluft, "Secure Coding in Perl", March 4, 2021
https://www.meetup.com/SVPerl/events/gjdzdsyccfbgb/
** possible topics 
*** steven_lembark
**** https://www.slideshare.net/lembark/hypers-and-gathers-and-takes-oh-my
***** slide21:  "unit sub MAIN { ..."  unit?
**** https://www.slideshare.net/lembark/generating-querying-calendar-tables-in-posgresql

*** adverbs that control returns, e.g. :p for pairs (a feature Bruce Gray likes)
**** https://docs.raku.org/language/subscripts#index-entry-:p_(subscript_adverb)
*** andrew shitov "Perl 6 at a Glance"
**** https://andrewshitov.com/perl6-at-a-glance/
**** https://andrewshitov.com/wp-content/uploads/2020/01/Perl-6-at-a-Glance.pdf
*** perl weekly challenge: 
**** https://perlweeklychallenge.org/

*** promises and threads
https://www.reddit.com/r/rakulang/comments/lthpxe/are_promises_multithreaded/
**** Jonathan Worthington
https://github.com/Raku/CCR/blob/main/Remaster/Jonathan%20Worthington/Racing-to-writeness-to-wrongness-leads.md
https://github.com/Raku/CCR/blob/main/Remaster/Jonathan%20Worthington/A-unified-and-improved-Supply-concurrency-model.md

*** how is Raku code organized?
**** rakudo/docs
The developer-oriented docs (the equivalent of man perlguts)
/home/doom/End/Sys/Perl6/dev/rakudo/docs

**** roast
test suite and effective specs for Raku
https://github.com/Raku/roast

**** rakudo 
https://github.com/rakudo/rakudo
the leading implementation of Raku

**** nqp
https://github.com/Raku/nqp
"not quite perl" minimal sub-set of Raku that compiles the rest

**** rakudo, user-level docs
https://github.com/Raku/doc
#+BEGIN_SRC sh
## newfangled way they want to do it
gh repo clone Raku/doc
## what I still do
git clone git@github.com:Raku/doc
#+END_SRC

***** As opposed to the user-level docs:
https://github.com/Raku/doc/
**** Q: is there a spec for Raku?  
***** not really: various references point at the test suite as the "spec": 
https://github.com/Raku/roast
****** This now supersedes the Synopsis pages

***** what is the proper behavior of ^methods and ^method_names
****** researching for this issue: 
https://github.com/rakudo/rakudo/issues/4207
****** There are no tests of ^method_names but there are some for ^methods:
******* https://github.com/Raku/roast/blob/master/S12-introspection/methods.t
******* These are largely sanity tests written to avoid gratuitious breakage
e.g. it checks that Any.^methods shows more than List.^methods
****** Synopsis 12 describes a ".^methods" (a short cut for ".HOW.methods")
******* https://design.raku.org/S12.html#Introspection
******* In general, the behavior described here seems much like the current behavior:
"The .^methods method returns method-descriptors containing:
    name                the name of the method"
******* Note, the ".^can" method might be used to check the ".^methods.name":
$obj.^can("bark")
******* https://raku.org/specification/
******** 6.c spec: https://github.com/Raku/roast/tree/6.c-errata
******** dev spec: https://github.com/Raku/roast
****** Places ".^methods" are mentioned in docs 
******* found via search index:
******** https://docs.raku.org/type/Metamodel::ClassHOW
say Int.^methods(:all).pick.name;         # OUTPUT: «random Int method n
******** https://docs.raku.org/type/Metamodel::ClassHOW#(Metamodel::MethodContainer)_method_methods
Returns a list of public methods available on the class (which includes methods from superclasses and roles). 
******** https://docs.raku.org/language/classtut#Introspection
my Programmer $o .= new;
...
say $o.^methods(:local)».name.join(', ');
******** https://docs.raku.org/type/ForeignCode
******* found grepping the src for the docs: find . -type f -exec grep --color -nH -e '\^method' {} +
******** https://docs.raku.org/language/5to6-perlvar
******** Language/classtut
******** Language/operators
******** Language/rb-nutshell
******** Language/structures
******** Type/ForeignCode
******** Type/Metamodel/MethodContainer
******** Type/Signature
******** Type/Stash
****** There are no places ".^method_names" is mentioned in the docs.

*** how would you get a list of all the built-in classes?
**** note: can't instantiate with an empty new on all (just many)
**** Symbol::Scan can get you ones currently in use
***** git@github.com:doomvox/perl6-symbol-scan.git
