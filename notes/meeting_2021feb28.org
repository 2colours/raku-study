* meeting notes Feb 28, 2021
** plan
*** plan stuff
*** ask for ideas
*** stall until end of meeting
** announcements
SV Perl talk: Ian Kluft, "Secure Coding in Perl", March 4, 2021
https://www.meetup.com/SVPerl/events/gjdzdsyccfbgb/
** topics 
*** steven_lembark
**** https://www.slideshare.net/lembark/hypers-and-gathers-and-takes-oh-my
***** slide21:  "unit sub MAIN { ..."  unit?

**** https://www.slideshare.net/lembark/generating-querying-calendar-tables-in-posgresql

*** adverbs that control returns, e.g. :p for pairs (a feature Bruce Gray likes)
https://docs.raku.org/language/subscripts#index-entry-:p_(subscript_adverb)

*** andrew shitov "Perl 6 at a Glance"
**** https://andrewshitov.com/perl6-at-a-glance/
**** https://andrewshitov.com/wp-content/uploads/2020/01/Perl-6-at-a-Glance.pdf

*** perl weekly challenge: 
**** https://perlweeklychallenge.org/

*** how is Raku code organized?
**** rakudo/docs
The developer-oriented docs (the equivalent of man perlguts)
/home/doom/End/Sys/Perl6/dev/rakudo/docs

**** roast
test suite and effective specs for Raku
https://github.com/Raku/roast

**** rakudo 
https://github.com/rakudo/rakudo
the leading implementation of Raku

**** nqp
https://github.com/Raku/nqp
"not quite perl" minimal sub-set of Raku that compiles the rest

**** rakudo, user-level docs
https://github.com/Raku/doc
#+BEGIN_SRC sh
## newfangled way they want to do it
gh repo clone Raku/doc
## what I still do
git clone git@github.com:Raku/doc
#+END_SRC

***** As opposed to the user-level docs:
https://github.com/Raku/doc/
**** Q: is there a spec for Raku?  
***** not really: various references point at the test suite as the "spec": 
https://github.com/Raku/roast
****** This now supersedes the Synopsis pages

***** what is the proper behavior of ^methods and ^method_names
****** researching for this issue: 
https://github.com/rakudo/rakudo/issues/4207
****** There are no tests of ^method_names but there are some for ^methods:
******* https://github.com/Raku/roast/blob/master/S12-introspection/methods.t
******* These are largely sanity tests written to avoid gratuitious breakage
e.g. it checks that Any.^methods shows more than List.^methods
****** Synopsis 12 describes a ".^methods" (a short cut for ".HOW.methods")
******* https://design.raku.org/S12.html#Introspection
******* In general, the behavior described here seems much like the current behavior:
"The .^methods method returns method-descriptors containing:
    name                the name of the method"
******* Note, the ".^can" method might be used to check the ".^methods.name":
$obj.^can("bark")
******* https://raku.org/specification/
******** 6.c spec: https://github.com/Raku/roast/tree/6.c-errata
******** dev spec: https://github.com/Raku/roast
****** Places ".^methods" are mentioned in docs 
******* found via search index:
******** https://docs.raku.org/type/Metamodel::ClassHOW
say Int.^methods(:all).pick.name;         # OUTPUT: «random Int method n
******** https://docs.raku.org/type/Metamodel::ClassHOW#(Metamodel::MethodContainer)_method_methods
Returns a list of public methods available on the class (which includes methods from superclasses and roles). 
******** https://docs.raku.org/language/classtut#Introspection
my Programmer $o .= new;
...
say $o.^methods(:local)».name.join(', ');
******** https://docs.raku.org/type/ForeignCode
******* found grepping the src for the docs: find . -type f -exec grep --color -nH -e '\^method' {} +
******* https://docs.raku.org/language/5to6-perlvar
******* Language/classtut

./doc/Language/5to6-perlvar.pod6:231:exact running instance, for more information use <.^methods> to introspect all the above.

./doc/Language/classtut.pod6:811:say $o.^methods(:local)».name.join(', ');
./doc/Language/classtut.pod6:839:X<|^methods>
./doc/Language/classtut.pod6:840:C<$o.^methods(:local)> produces a list of L<Method|/type/Method>s that can be
./doc/Language/classtut.pod6:860:value is. With C<.^methods>, you can learn what you can do with the class.

./doc/Language/operators.pod6:804:A X<metamethod call>. C<$invocant.^method> calls C<method> on C<$invocant>'s

./doc/Language/rb-nutshell.pod6:1034:$person.^methods;          # Raku, using .^ syntax to access metamethods

./doc/Language/structures.pod6:475:In this case we are using the I<syntactic sugar> for C<HOW.method>, C<^method>,

./doc/Type/ForeignCode.pod6:20:say $_.name ~ ' → ' ~ $_.^name for &does-nothing.^methods;

./doc/Type/Metamodel/ClassHOW.pod6:38:    say Int.^methods(:all).pick.name;         # OUTPUT: «random Int method name␤»

./doc/Type/Metamodel/MethodContainer.pod6:15:    say .name for Int.^methods(:all);
./doc/Type/Metamodel/MethodContainer.pod6:44:    say A.^methods();                   # x
./doc/Type/Metamodel/MethodContainer.pod6:45:    say A.^methods(:all);               # x infinite defined ...

./doc/Type/Signature.pod6:119:    say Foo.^methods.first(*.name eq 'bar').signature ~~ :($: *%) ;

./doc/Type/Stash.pod6:38:class itself, via C<.can> and C<.^methods>.

./util/list-missing-methods.p6:119:    try { ::($type-name).^methods;
./util/list-missing-methods.p6:127:    my %methods := (::($type-name).^methods(:local).classify(

./util/missing-methods.p6:42:    return $type-name.^methods(:local);


****** There are no places ".^method_names" is mentioned in the docs.
*** promises and threads
https://www.reddit.com/r/rakulang/comments/lthpxe/are_promises_multithreaded/
**** Jonathan Worthington
https://github.com/Raku/CCR/blob/main/Remaster/Jonathan%20Worthington/Racing-to-writeness-to-wrongness-leads.md
https://github.com/Raku/CCR/blob/main/Remaster/Jonathan%20Worthington/A-unified-and-improved-Supply-concurrency-model.md
