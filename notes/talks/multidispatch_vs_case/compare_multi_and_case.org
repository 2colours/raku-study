* raku case vs multidispatch                                              f
** very roughly
*** case
**** an obvious lexical sequence of comparisons (running a gauntlet)
**** "default" means the catch-all, the alternative if no other cases match
*** multi
**** orders cases ~by "specificity", not lexically 
***** in the case of subsets, falls back to order of definition
****** subsets are grouped by the type they're based on
****** BUT they don't behave like two multis with same type
******* uses the order of definition for subsets based on same type 
**** code that handles various types can be scattered, defined in different places
**** there's an "is default" trait available to break ties in type specificity

** utility
*** case 
**** good for any sort of comparison, e.g. pattern matches
*** multi
**** best for 
***** checking types
***** particular fixed values
**** you can do other things with them but
***** won't perform as well
***** are essentially second-class citizens
****** e.g. in the case of subsets actual behavior is undocumented

