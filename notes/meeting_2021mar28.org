* meeting notes Mar 28, 2021
** topics
*** news: perl foundation project to improve raku docs
**** https://perl-foundation-outreach.github.io/season-of-docs-ideas/docs.html
***** some of the ideas include documenting exceptions and traits better
***** they're looking for suggestions for big things to fix (not our usual bug reports to JJ)

*** news: classes can have custom type coercion in 2020.11
https://rakudoweekly.blog/2020/11/16/2020-46-coercion-renewed/

*** extracting results from grammar matches
**** alternate example, works
/home/doom/End/Cave/Perl6/Wall/raku-study/bin/2021mar21/ini_file_parsing_with_zoffix_grammar.raku
***** from zoffix talk july 28, 2018 intro p6 regexes and grammars
****** https://www.youtube.com/watch?v=TUmFAPvssrk

**** narrow down what was wrong with moritz lenz inifile
***** /home/doom/End/Cave/Perl6/Wall/raku-study/bin/2021mar21/ini_file_parsing_with_moritz_lenz_grammar.raku
****** bruce gray sorted it out: Needed a $/.<value> to deref, *not* $/.value
******* bad gotcha: the .value method is there for the grammar to work
******** if I understand right: calling it restarts part of the grammar matching
*** grammar to parse doomfiles
**** simple scripts, e.g. scan through browse sequence (done)
https://github.com/doomvox/raku-study/blob/main/bin/2021mar28/doomfiles_browse_sequence-ii.raku
***** a number of issues: 
****** bad efficiency bug (Mohrvm panic!) 
******* fixed by changing   stuff regex (.*?) to non-greedy (.*)
******* yary hluchan suggests
#+BEGIN_SRC perl6-mode
Add star  yary<not.com@gmail.com>	Mon, Mar 29, 2021 at 8:36 AM
To: Joseph Brenner <doomvox@gmail.com>
Cc: perl6-users <perl6-users@perl.org>, San Francisco Perl Mongers User Group <sanfrancisco-pm@pm.org>
Reply | Reply to all | Forward | Print | Delete | Show original
Hi Joe & other Raku study group attendees,

At the time I left, we were looking at a grammar with a speed-memory issue on large-ish files. I had a germ of an idea which I couldn't express, and from the meeting notes I see you have a simple fix "by changing stuff regex (.\*?) to non-greedy (.\*)" I suspect the greedy-optimization works because the thing after the "stuff" regex is near the end of the file. Thus if instead it was close to the beginning, it would have a similar issue with greedy and non-greedy would fix.

With a night to sleep on it, the thing I was thinking & trying to say is that, in the specialized HTML-grammar you had, the decision points are all at left-brackets. By re-writing "stuff" so that it will only backtrack when it hits a bracket, I expect more speed-memory gains.

How well does this perform vs the simple .* greedy fix?

    regex stuff
    { (  # capture stuff (positional capture might not be needed)
        [               # Stuff is a group of either
            \<          # a left-bracket decision point
          ||            # or
            <-[ \< ]>+: # a ratcheting string of non-decision points
        ]*              # 0-many of those. Greedy or non-greedy both work?
    ) }  # end capture, end regex
#+END_SRC


**** case insensitive matches (TODO check syntax)
|                              | perl5              | raku                  |
|------------------------------+--------------------+-----------------------|
| external modifier/adverb     | m/.../i            | m:i/.../              |
| internal to pattern          | m/(?i: ... )/      | m:/ :i ... /          |
| mixed, only part insensitive | m/(?i: ... ) ... / | m:/ [ :i ... ] ...  / |
|                              |                    |                       |

**** using a real html parser is usually recommended, of course:
***** Yary H : The HTML-tree-find module I was looking at is https://github.com/zostay/raku-DOM-Tiny

*** getting a list of primes with monotonically increasing differences
**** bruce gray shows us some lazy list trickery up at rosettacode now
***** http://rosettacode.org/wiki/Next_special_primes#Raku

**** sub with "destructuring" syntax:

#+BEGIN_SRC perl6-mode
sub is-special ( ($previous, $gap) ) {
#+END_SRC

sub takes a list of two elements, unpacked into the two named variables.  

(Better than my usual dodge of passing a var named $pair which is
not actually a Pair.)

*** the .first method 
william michels was interested in some lizmat examples from irc

https://github.com/doomvox/raku-study/blob/main/bin/2021mar28/first_method_on_arrays.raku
/home/doom/End/Cave/Perl6/Wall/raku-study/bin/2021mar28/first_method_on_arrays.raku

** next meeting on april 11th, taking a break for easter
