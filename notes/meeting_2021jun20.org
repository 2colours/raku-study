* meeting notes June 20, 2021
** for next time
*** jeff implenting rpn syntax in raku
**** grammar
**** bruce gray reports difficulties with prefix operators with more than one argument
*** jeff: interested in new work on immutable data structures (post by daniel?)

*** bill stackexchange posts:
13:33:09	 From Bill Michels : https://unix.stackexchange.com/a/654184/227738
13:35:04	 From Bill Michels : https://unix.stackexchange.com/a/654444/227738
13:38:35	 From Bill Michels : https://unix.stackexchange.com/a/654467/227738

*** david: has a perl utility he wants to talk about (next meeting?)

** this meeting's stuff
*** deepmap
**** basics
**** looked at where it's defined in the core
**** turned up bug: a bad condition can mangle the returned structure

*** Doing the Data::Map job in raku
**** my lightning talk at the Cinc
***** https://www.youtube.com/watch?v=wViVLytlwb8
**** "slides":
***** https://github.com/doomvox/raku-study/tree/main/notes/talks/data_math
**** the code:
***** https://metacpan.org/pod/Data::Math
***** https://metacpan.org/pod/Scalar::Classify
***** https://github.com/doomvox/data-math
***** https://github.com/doomvox/scalar-classify
**** ideas:
***** deepmap and/or duckmap seem close...
****** from https://docs.raku.org/type/Any
******* deepmap
******* duckmap
******* nodemap
******* flatmap
******** deprecated: use .map followed by .flat instead. ((not the other way around?))
***** but I need to zip together *two* trees
****** doublemap, deepcross, treereduce...?  (( any excuse for doublecross? ))
****** One way: collapse paths to compound keys, then use Mix math
****** also, what about custom data-container classes? 
******* (could be Data::Math approach isn't so relevant?)

*** last rakudo weekly had a bunch of stuff:
**** https://rakudoweekly.blog/2021/06/14/2021-24-missing/


*** bits from the Conference in the Clouds (CinC -- hereafter pronounced "sink"/"sync"):

**** Rop
From Bruce Gray : Least favorite meta-operator: Rop
my $a = 41; 1 R+= $a; say $a;
Bwahahaha!

**** leon timmermans:
From Brent Laabs : "prefix-" X~ @list ...... whaaaat?  zomg!
From Bruce Gray : Works with Fat Arrow. my %h = <A B C> X=> 1;

**** great naming debates
***** man perlstyle: 

"... use underscores to separate words in longer
identifiers. It is generally easier to read
$var_names_like_this than $VarNamesLikeThis,
especially for non-native speakers of English.  
It's also a simple rule that works consistently 
with 'VAR_NAMES_LIKE_THIS'."

****** I think underscores work as a good stand-in for spaces
******* btw: unix people hate file names with spaces
***** hyphen lovers: Leon Timmermans (underscores "ugly"?)  
***** camelcase lovers: Suzana Ezquina ("easier to type")   ThisIsCamel  but: thisIsCamelToo ?
***** kebabcase: Fernando Correa, JJ Atria                  this-is-kebab
****** There's nothing fundamentally interesting about this debate, except the fact that it exists.

**** my new band name: "keyboard noise people" 

** from the last study group

*** follow-up: passing junctions as an argument
**** File::Find exclude
***** https://www.nntp.perl.org/group/perl.perl6.users/2021/05/msg9917.html
***** https://github.com/doomvox/raku-study/tree/main/bin/2021may30/file_find_with_junction_as_exclude.raku
***** is this the canonical File::Find repo?  (brian d foy has one, too, but it looks stale)
https://github.com/tadzik/File-Find
****** DONE open issue / submit pull request to Mu the name and exclude arguments
**** Ralph Mellor conceeds junction "precedence" can be confusing.
***** TODO (( link from mailing list ))
**** TODO find (or open) issue: raku's perl5 regex compatibility (:P5) can't handle (?^i:
***** https://www.nntp.perl.org/group/perl.perl6.users/2021/05/msg9924.html
***** https://github.com/rakudo/rakudo/issues/2624
***** out:

#+BEGIN_SRC text

My first preference would be to get :P5 working so
that it's perfectly compatible with perl, second best
would be to carefully document the ways it's not
compatible, third best would be to deprecate it and
generate a warning when you try to use it.

The absolute worst thing to do is what's currently
being done: leaving a semi-broken feature lying
around, and then when someone trips over it imply
they're dumb for trying to use it.  

This issue has been open for over two years now. 

#END_SRC


** other topic ideas
*** raku classes as data containers (joe brenner) 
**** https://github.com/doomvox/raku-study/tree/main/bin/2021may16/data_container_class_iii.raku
***** spots example
****** schema: /home/doom/End/Cave/GraphVizDbiGeneral/Wall/graphs/schema_diagram.png
******* generated with: /home/doom/End/Cave/GraphVizDbiGeneral/bin/generate_schema_diagram_spots
****** https://github.com/doomvox/raku-study/tree/main/bin/2021may30/spots_data_container_class.raku

*** unusual argument passing signatures (joe brenner)
**** /home/doom/End/Cave/Ice/Xtal/Perl6/passing_args.org
**** /home/doom/End/Cave/Perl6/Wall/raku-study/bin/2021may02/mixing_named_args_and_positional_ones.raku
 
*** bruce gray rosettacode
**** http://rosettacode.org/wiki/Coprime_triplets#Raku
**** https://rosettacode.org/wiki/Tree_from_nesting_levels#Raku 

*** how flat is flat
**** https://stackoverflow.com/questions/67515479/what-is-a-simple-and-elegant-way-to-flatten-lists-or-arrays-of-arbitrary-depths
**** https://stackoverflow.com/questions/41648119/how-can-i-completely-flatten-a-list-of-lists-of-lists
**** https://en.wikipedia.org/wiki/Superflat

*** go through my perl5 templates: how much is core raku now?

*** raku die handlers vs perl5

*** raku idioms
**** https://github.com/doomvox/raku-study/blob/main/notes/idioms.org
***** maybe: favor methods over functions?
***** leon_timmermans: junctions, favor function on lh, operators on rh?

** more leftover stuff 
*** note to self: you can't look for raku modules with file system searches.
*** TODO is it possible to just mail "SUBSCRIBE" to documentation@raku.org


*** junctions
**** basics
***** /home/doom/End/Cave/Perl6/Wall/raku-study/notes/junctions
https://github.com/doomvox/raku-study/tree/main/notes/junctions

***** https://www.nntp.perl.org/group/perl.perl6.users/2020/06/msg8870.html

***** recent discussion of oddities: https://www.nntp.perl.org/group/perl.perl6.users/2021/05/msg9961.html




** appendix: the usual links
*** code examples
https://github.com/doomvox/raku-study/tree/main/bin/2021jun20
*** meeting notes (material from this file)
https://github.com/doomvox/raku-study/tree/main/notes/meeting_2021jun20.md
*** SF Perl page, has links to mailing list
http://sf.pm.org/
*** perl6-users mailing list archive
https://www.nntp.perl.org/group/perl.perl6.users/

** announcments
*** next meeting: July 11th
*** The Oakland Museum is re-opening--
**** we might try alternating live and online meetings

