* 69 cent tour of git
** some stops on the tour
*** first stop: using an existing git repo, e.g. 
**** https://github.com/doomvox/raku-study
**** some set-up to do, if not done already:
***** create a github account
***** get added to raku-study as a collaborator
****** Settings->Manage Access->Invite a collaborator
https://github.com/doomvox/raku-study/settings/access
***** share your public ssh key (rsa, not dsa) at your github account
****** picture button (top-right)->Settings->SSH and GPG keys->New SSH key button
https://github.com/settings/keys 
****** Add your "ssh-rsa" from: ~/.ssh/id_rsa.pub
******* if you don't have one yet, run:
#+BEGIN_SRC perl6
ssh-keygen -t rsa
#+END_SRC
******* ssh config:  add github
~/.ssh/config
#+BEGIN_SRC sh 
      Host github.com
         Hostname ssh.github.com
         Port 443
         IdentityFile /home/doom/.ssh/id_rsa
#+END_SRC

**** go to the "Code" button near the right, click for the drop-down
**** with the SSH tab selected (the default) you'll see:
#+BEGIN_SRC sh
git@github.com:doomvox/raku-study.git
#+END_SRC

**** create a location to work, e.g.:
#+BEGIN_SRC sh
mkdir /tmp/dev
cd /tmp/dev
#+END_SRC
**** get a local copy of raku-study repository
#+BEGIN_SRC sh
git clone git@github.com:doomvox/raku-study.git
#+END_SRC
**** create a file, add and commit
#+BEGIN_SRC sh
cd ~/dev/raku-study/bin/2021may02
echo "say 'hello';" > hello.raku
raku hello.raku
git status
git add hello.raku
git commit -m'created demo script hello.raku'
git log -n 3
git log -n 3 --oneline
git log --oneline | egrep 'created demo'
#+END_SRC

**** to do and to notice
****** note: no sequential version numbers 
****** "commits" are SHA1 hashes
******* they're long but you can abbreviate to 5 or 6 chars
****** not file oriented: commits can include changes throughout the tree

**** edit the file, check diff, commit
#+BEGIN_SRC sh
echo "say 'goodbye';" >> hello.raku
git status
git diff
git commit -a -m 'added goodbye line to hello.raku'
git log -n 3
git diff
git diff <commit1> <commit2>
<emacs server-start>
git pull
git status
git commit -a -m'wtf?'
# git push
git push -u origin main
#+END_SRC

#+BEGIN_SRC sh
git show REVISION:path/to/file
#+END_SRC
*** second stop: create a new git repo
****  working standalone (without a server like github)
***** cd ~/dev/my_project
***** git init
***** git add
***** git status
***** .gitignore
#+BEGIN_SRC sh
*~   
*#* 
*.[oa]
#+END_SRC 
***** .git/info/exclude
**** adding version control to existing tree (bruce gray)
#+BEGIN_SRC sh
git init ; git add . ; git commit -m 'Initial commit'
#+END_SRC

*** third stop: putting that new git repo on github
**** creating a new project at github
**** associating existing repo with new project
See: /home/doom/End/Cave/Ice/Xtal/Git/github.org
*** fourth stop: haven't covered the cool stuff
**** branching and merging
#+BEGIN_SRC sh
git branch                             # list branches
git branch -r                          # list remote branches
git branch new_feature_experiment
git checkout new_feature_experiment
# ... do stuff ...
# when happy with state of branch
git checkout master                    # return to original main branch
git merge new_feature_experiment       # import work from branch
#+END_SRC sh

**** github pull request
https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests
**** stuff to read
***** "Pro Git" by Scott Chacon and  Ben Straub
****** http://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
****** Can read on-line, can get hardcopy from (spit) Amazon
****** But source is at github: https://github.com/progit/progit2

***** alan recommends:
https://opensource.com/article/21/4/context-switching-git?sc_cid=7016000000127ECAAY

***** Randal Schwartz slides
****** https://www.slideshare.net/RandalSchwartz/git-a-brief-introduction
****** explains some of the internals as well as workflow
******* object
******* index

**** there's a command line tool to do github manipulations without the damn website UI
***** https://cli.github.com/
***** unfortunately, this kind of sucks:
****** whizzy to little purpose
******* drop-down menus in a CLI tool?
******* won't work in emacs sub-shell
****** not sure it's scriptable
*** fifth stop: things you will not do with git
**** work with binary files
(compiled code, media files, ms word docs, etc)
**** control your entire home directory
**** share work with another person without using a server
**** TODO set up a meta-git repository that contains multiple git projects. ((or can you?))

