* meeting notes Feb 21, 2021
** agenda
*** richard hainsworth will present his work on pod6 processing
**** http://raku.finanalyst.org
**** Raku::Pod::Render
**** looks very good: additional features for html effects and image includes
***** goal: extend pod6 so that it's more useful for website generation
** announcements
Ian Kluft, "Secure Coding in Perl", March 4, 2021
https://www.meetup.com/SVPerl/events/gjdzdsyccfbgb/
** topics
*** combined operator assignment shortcuts (e.g. ~=)
https://github.com/doomvox/raku-study/tree/main/bin/2021feb21/combined_operator_assignment_shortcuts.pl6
**** TODO  bill points out ~= is not in documentation index
*** ^methods method oddities: .name
https://github.com/rakudo/rakudo/issues/4207
https://www.nntp.perl.org/group/perl.perl6.users/2021/02/msg9734.html
*** lizmat fosdem talk on sets etc
**** http://bofh.nikhef.nl/events/FOSDEM/2021/D.perl/raku_sets_without_borders.mp4
**** code example
https://github.com/doomvox/raku-study/tree/main/bin/2021feb21/sets_etc-working_from_lizmat_examples_fosdem_talk.pl6
**** related operations
| method  | description                      | key attributes  |
|---------+----------------------------------+-----------------|
| .unique | does a uniq                      | preserves order |
| .squish | fold together consecutive dupes  | preserves order |
| .Bag    | gets counts of repeated elements |                 |
**** Simon Proctor module, sets from ranges
https://github.com/Scimon/p6-Range-SetOps
**** Richard Hainsworth reports issues with set identity (==) (can't repro)
*** project: write variants of set operations:
**** act on *and return* arrays
***** a wrapper could remember what it was given 
**** preserve order
**** maybe: avoid uniqifying
**** maybe: act on more complex structures
***** distinguish and preserve metadata
****** do-able (partially) with custom WHICH
****** what about numeric operations
*** andrew shitov "Perl 6 at a Glance"
**** https://andrewshitov.com/perl6-at-a-glance/
**** https://andrewshitov.com/wp-content/uploads/2020/01/Perl-6-at-a-Glance.pdf

*** adverbs that control returns, e.g. :p for pairs (a feature Bruce Gray likes)
https://docs.raku.org/language/subscripts#index-entry-:p_(subscript_adverb)
** steven_lebark
*** https://www.slideshare.net/lembark/hypers-and-gathers-and-takes-oh-my
*** https://www.slideshare.net/lembark/generating-querying-calendar-tables-in-posgresql

** Bill Michels contributes some news of rust:
*** https://www.theregister.com/2021/02/02/patching_apache_rust/

** perl weekly challenge: 
*** https://perlweeklychallenge.org/

** graphviz is used for raku docs
*** https://graphviz.org/
*** usually run via "dot"
*** Scimon Proctor: Here's the Graph for Any.
**** https://docs.raku.org/images/type-graph-Any.svg
*** Bruce Gray example of using GraphViz:
**** Using online graphviz site: 
***** https://dreampuf.github.io/GraphvizOnline/
***** Feed it this graph description:
#+BEGIN_SRC c
digraph G {
  subgraph cluster_0 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
    a0 -> a1 -> a2 -> a3;
    label = "process #1";
  }
  subgraph cluster_1 {
    node [style=filled];
    b0 -> b1 -> b2 -> b3;
    label = "process #2";
    color=blue
  }
  start -> a0;
  start -> b0;
  a1 -> b3;
  b2 -> a3;
  a3 -> a0;
  a3 -> end;
  b3 -> end;
  start [shape=Mdiamond];
  end [shape=Msquare];
}
#+END_SRC

****** https://github.com/Raku/doc/blob/master/type-graph.txt
****** https://github.com/Raku/doc/blob/master/xt/type-graph.t

*** javascript tools to plot graphs large datasets
**** d3 
**** svg (partial solution)

*** Three types of "slurpy" parameters
**** https://docs.raku.org/type/Signature#Slurpy_parameters
|                      | syntax  | description                             |
|----------------------+---------+-----------------------------------------|
| flattened            | *@args  | flattens passed arguments               |
| unflattened          | **@args | slurps all arguments without flattening |
| single argument rule | +@args  | only flattens if a single argument      |
**** code examples
https://github.com/doomvox/raku-study/tree/main//bin/2021feb21/slurpy_family.pl6

**** Bruce Gray explains the single arg behavior with for loop as example
#+BEGIN_SRC perl6
for @a, @b, @c -> $array {
   # loops exactly 3 times
 }
#+END_SRC

#+BEGIN_SRC perl6
my @a = <a b c d e f>;
for @a -> $item {
   # loops exactly 6 times
 }
#+END_SRC

**** Matthew Stephen Stuckwisch talk
***** https://video.fosdem.org/2021/D.perl/raku_unexpected_simplicity.webm
