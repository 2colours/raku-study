* meeting notes August 29, 2021

** the method .round, currently calls it's argument "scale"
*** a better term might be "nearest"
"round off to the nearest"

** lowest common ancestor with raku classes
https://stackoverflow.com/questions/68869354/given-two-objects-can-you-find-the-nearest-common-ancestor


*** Lowest common ancestor, at wikipedia:

"This article is about lowest common ancestors in graph theory
and computer science. For the common ancestor of a set of species
in evolutionary trees, see most recent common ancestor. For a
common ancestor of all life forms, see last universal common
ancestor."  

In graph theory and computer science, the lowest common ancestor (LCA) of two nodes v and w in a tree or directed acyclic graph (DAG) T is the lowest (i.e. deepest) node that has both v and w as descendants, where we define each node to be a descendant of itself (so if v has a direct connection from w, w is the lowest common ancestor). 

*** example code
https://github.com/doomvox/raku-study/tree/main/bin/2021aug29/lca_so_1.raku
https://github.com/doomvox/raku-study/tree/main/bin/2021aug29/lca_so_2.raku
https://github.com/doomvox/raku-study/tree/main/bin/2021aug29/lca_so_3.raku

** multiple dispatch and types

Larry Wall on Raku:

"We don't actually have types for the benefit of strong typing.
That's third place.  Second place is we can optimize better.  But
first place is actually it's there for multiple dispatch."

   -- Erlang & Elixir Factory, 2017

Douglas Crockford:

"But it turns out that strong typing does not eliminate the
need for careful testing.  And I have found in my work that the
sorts of errors that strong type checking finds are not the
errors I worry about."  

   -- "Javascript: The Good Parts" (2008)

*** my standard complaint
**** we could check whether strong typing helps
***** e.g. conduct experiments where teams of programmers compete
***** but computer "scientists" don't do experiments
****** not if it means consulting with a social scientists
***** unverified claims about human cognitive abilities abound

*** using multi-dispatch for "dualmap"
**** kind of cool
***** implementing this feature in raku took little code:
#+BEGIN_SRC perl6
my $dmh = Data::Dualmap::Recurse::Numerics.new( 
          string_handler => 
             { do if ( $^a eq $^b ) { "Both: $a" } else { "1: $a  2: $b" } } );
my $result = $dmh.dualmap( '-', $gross, $costs );
#+END_SRC
**** a little tricky to think about
***** it isn't *exactly* like a case statement
****** but the "is default" feature helps

*** dualmap status
**** did a rewrite
***** dualmap is now more like deepmap
****** needs a code block as argument
****** acts on any value of any type
***** dualmap-numerics
****** clone of my perl5 project Data::Math
******* presumes you're working on numeric leaf nodes
******* allows strings for operations ('+', '*', '-', '/')
******* default string handler does what *I* mean,
******** via OOP interface can use code block instead
***** still may need more thought 
****** maybe: any number of code blocks associated with arbitrary types
******* do *this* with a leaf node that looks like *that*
****** consider the case of set operations

** david christensen
**** general perl5 code to walk a structure recursively
**** home network: unifi on linode 
***** linode: sponsors of perl
***** unifi controller runs on enginex webserver
****** https://github.com/doomvox/raku-study/blob/main/notes/dpchrist-perl-walk/Dpchrist-Perl-walk-flowchart.pdf
****** https://github.com/doomvox/raku-study/blob/main/notes/dpchrist-perl-walk/Dpchrist-Perl-walk-flowchart.odg


** the maybe method (dot question mark operator: ".?")
#+BEGIN_SRC perl6
my $result = $obj.?method($arg, $arg);
#
# an alternate to:
if $obj.can('method') {
   $obj.method( $arg1, $arg2 );
}
#+END_SRC
*** documentation: "Safe call operator"
**** "$invocant.?method calls method method on $invocant if it has a method of such name. Otherwise it returns Nil."
**** https://docs.raku.org/language/operators#methodop_.?
*** avoids need to check if .can
*** (from a jonathan worthington code example)
*** bruce gray argues it's to short-circuit long chains 

** the usual links:
*** meeting notes
**** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2021aug29.md
*** code examples:
**** https://github.com/doomvox/raku-study/tree/main/bin/2021aug29

** Bruce Gray: answering the perl weekly challenge in perl and raku
*** https://theweeklychallenge.org/blog/perl-weekly-challenge-127/
*** https://github.com/manwar/perlweeklychallenge-club
*** https://github.com/Util/perlweeklychallenge-club/blob/branch-for-challenge-127/challenge-127/bruce-gray/perl/ch-1.pl 
*** Design by Contract, "Fast Fail Principle": https://enterprisecraftsmanship.com/posts/fail-fast-principle/ 
*** blog post by laurent_r:
http://blogs.perl.org/users/laurent_r/2021/08/perl-weekly-challenge-127-disjoint-sets-and-conflict-intervals.html


** some stackoverflow questions
*** https://github.com/doomvox/raku-study/tree/main/bin/2021aug29/interpolation_games.raku
*** https://github.com/doomvox/raku-study/tree/main/bin/2021aug29/so_question_order_of_operations_with_R_and_pop.raku

** william michaels
*** answers shell questions with raku
*** if you approve some of these, you might upvote: 
**** https://unix.stackexchange.com/a/654444 
**** https://unix.stackexchange.com/a/655217 
**** https://unix.stackexchange.com/a/655944 
**** https://unix.stackexchange.com/a/658564 
**** https://unix.stackexchange.com/a/658618 
**** https://unix.stackexchange.com/a/658666 
**** https://unix.stackexchange.com/a/658703 
**** https://unix.stackexchange.com/a/658716 
**** https://unix.stackexchange.com/a/664929
*** question: will shell people use a tool that needs to be installed first?

** the future:
*** next meeting: September 12th, 2021
*** Bruce Gray promises an anti-Haskell spiel 
*** jeff
**** looking for a pod expert (richard hainsworth?)
